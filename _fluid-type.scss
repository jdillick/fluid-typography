//
// Fluid Typography Starter - see https://github.com/jdillick/fluid-typography
//

// ----------------------------------------------------------------------------
//
//    Variables
//
//    Set the variables below to match your Photoshop file widths (in pixels) and to specify breakpoints based on browser window size.
//
// ----------------------------------------------------------------------------

// These must be set in pixels
// root-font-sizing-constant is never used as an actual pixel dimension in
// browser. It is an arbitrary value used to generate rem values in px2rem
$root-font-sizing-constant: 10px;

$print-base-font-size: 16px !default;

// layouts -- the pixel width of the Photoshop file for each layout
$layouts: (
  'desktop': 1250px,
  'tablet': 640px,
  'mobile': 320px
) !default;

// Account for difference between 100vw and 100% when scroll bars are included on page.
$body-width-fix: true !default;

// limit fluid typography growth to a maximum width
$use-maximum-scaling-width: false !default;
$maximum-scaling-width: 1600px !default;

// ----------------------------------------------------------------------------
//
//    strip-units() : convert 14px/14em/etc to (int) 14
//
// ----------------------------------------------------------------------------
@function strip-units($number) {
  @if ($number == null) {
    @return null;
  }

  @return $number / ($number * 0 + 1);
}

// ----------------------------------------------------------------------------
//
//    get-layout-width() : helper
//
// ----------------------------------------------------------------------------
@function get-layout-width($name) {
    @return map-get($layouts, $name);
}

// ----------------------------------------------------------------------------
//
//    px2rem() : convert from pixels to rems
//
// ----------------------------------------------------------------------------
@function px2rem($pixels) {
  $pixels: strip-units($pixels);
  $constant: strip-units($root-font-sizing-constant);

  @return #{$pixels/$constant}rem;
}


// ----------------------------------------------------------------------------
//
//    px2em() : convert from pixels to ems, based on the context (inherited font-size in pixels)
//
// ----------------------------------------------------------------------------
@function px2em($pixels, $context: $root-font-sizing-constant) {
  $pixels: strip-units($pixels);
  $context: strip-units($context);

  @return #{$pixels/$context}em;
}

// ----------------------------------------------------------------------------
//
//    px2vw() : used to calculate vw font size so as to match Photoshop (or similar) design files.
//
// ----------------------------------------------------------------------------
@function px2vw($font-size-px, $layout-size-px) {
  $font-size-px: strip-units($font-size-px);
  $layout-size-px: strip-units($layout-size-px);

  @return ($font-size-px / $layout-size-px) * 100vw;
}

// ----------------------------------------------------------------------------
//
// 	vw-base() - set base font-size values in vws for each breakpoint
//
// ----------------------------------------------------------------------------
@mixin vw-base {
  $layout-keys: map-keys($layouts);

  @if ($body-width-fix) {
    @media screen {
      width: 100vw;
      margin-left: calc((100% - 100vw) / 2);
      overflow-x: hidden;
    }
  }

  // print base font size
  font-size: $print-base-font-size;

  // set font-size to scale until reach max width of the site
  @if ($use-maximum-scaling-width) {
    font-size: $root-font-sizing-constant * ($maximum-scaling-width / map-get($layouts, nth($layout-keys, 1)));

    @media screen and (max-width: $maximum-scaling-width) {
      font-size: px2vw($root-font-sizing-constant, map-get($layouts, nth($layout-keys, 1)));
    }
  }
  @else {
    @media screen {
      // don't constrain the growth of the base font-size
      font-size: px2vw($root-font-sizing-constant, map-get($layouts, nth($layout-keys, 1)));
    }
  }

  @for $index from 2 through length($layout-keys) {
      @media screen and (max-width: #{map-get($layouts, nth($layout-keys, $index - 1)) - 1}) {
          font-size: px2vw($root-font-sizing-constant, map-get($layouts, nth($layout-keys, $index)));
      }
  }
}

// ----------------------------------------------------------------------------
//
//  font-size-breakpoint() - calculate min/max font size breakpoints (for specific components)
//
//  Example usage:
//
//  blockquote {
//    font-size: px2rem(17); // scaling down from a base size of 17px
//
//    // when font-size shrinks to 12px, set the CSS to 12px to stop
//    // further scaling
//    @media (max-width: font-size-breakpoint(12px, $desktop-layout, 17px)) {
//      font-size: 12px;
//    }
//  }
//
// ----------------------------------------------------------------------------
@function font-size-breakpoint($font-size-limit-px, $layout-size-px, $font-size-px: $root-font-sizing-constant) {
	@return (($font-size-limit-px / $font-size-px) * $layout-size-px);
}

// ----------------------------------------------------------------------------
//
// minimum-base-font-size-mq() - create media query to set max-width to limit
// $font-size-start (viewed at $layout-width) to no smaller than $font-size-limit.
//
//  In other words: If your base font size is 16px at a desktop layout of 1600px,
//  and you want to prevent it from shrinking below 14px, this will create a media query to do so.
//
//  Example usage:
//  html {
//    @include minimum-base-font-size-mq($font-size-start: 16px, $font-size-limit: 14px, $layout-width: $desktop-layout);
//  }
//
// ----------------------------------------------------------------------------
@mixin minimum-base-font-size-mq($font-size-start, $font-size-limit, $layout-width) {
	@media (max-width: font-size-breakpoint($font-size-limit, $layout-width, $font-size-start)) {
		font-size: font-size-breakpoint($font-size-limit, $root-font-sizing-constant, $font-size-start);
	}
}

// ----------------------------------------------------------------------------
//
//  vw-base-font-range() - create font-size that will vary between two viewport
//  widths ranging from the maximum font-size and the minimum font-size.
//
//  y = mx + b
//
// ----------------------------------------------------------------------------
@mixin vw-base-font-range($view-width-max, $view-width-min, $min-font-size, $max-font-size) {
  $m: (strip-units($max-font-size) - strip-units($min-font-size)) / (strip-units($view-width-max) - strip-units($view-width-min));
  $b: $m * -1 * $view-width-min + $min-font-size;
  font-size: calc( #{$m} * 100vw + #{$b} );
}
